# -*- coding: utf-8 -*-

from itertools import izip
import Image

class Captcha(object):
    """Captcha manager and recognizer"""
    trainingSet = {
        (12, 17): {
            '1': '\x00\xf0\x00\xf0\x00\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\x00\x00\x00\x00\x00\x00',
            '2': '\xe0p\x000\x00\x10>\x00\xff\x00\xff\x00\xff\x00\xfe\x10\xfc\x10\xf80\xf0p\xe0\xf0\xc1\xf0\x87\xf0\x00\x00\x00\x00\x00\x00',
            '5': '\x00\x10\x00\x10\x00\x10\x0f\xf0\x0f\xf0\x00\xf0\x000\x00\x10~\x00\xff\x00\xff\x00\xff\x00\xff\x00~\x00\x00\x10\x000\xc0\xf0'
        },
        (12, 18): {
            '1': '\xe7\xf0\x00\xf0\x00\xf0\x00\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\x00\x00\x00\x00\x00\x00',
            '2': '\xe0\xf0\x000\x00\x10\x1e\x00\xff\x00\xff\x00\xff\x00\xfe\x00\xfe\x10\xfc0\xf8p\xe0\xf0\xc1\xf0\x83\xf0\x07\xf0\x00\x00\x00\x00\x00\x00',
            '3': '\xe0p\x00\x10\x00\x10>\x00\xff\x00\xff\x00\xfe\x10\xe0\x10\xe00\xe0\x10\xfc\x00\xff\x00\xff\x00\xff\x00~\x00\x00\x00\x00\x10\x80p',
            '7': '\xf3\x00\x00\x00\x00\x00\x06\x00\xff\x00\xfe\x10\xfe\x10\xfc0\xfc0\xf8p\xf8p\xf8p\xf0\xf0\xf0\xf0\xe1\xf0\xe1\xf0\xc3\xf0\xc3\xf0'
        },
        (13, 17): {
            '1': '\x80x\x00x\x80x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\x80\x00\x80\x00\x80\x00',
            '2': '\x008\x00\x08\x0e\x08\x7f\x00\xff\x00\xff\x08\xff\x08\xfe\x08\xfc\x18\xf88\xf0x\xe1\xf8\xc3\xf8\x07\xf8\x00\x08\x00\x08\x00\x08',
            '3': '\xc0x\x80\x18\x80\x08\xfe\x08\xff\x08\xff\x08\xe0\x18\xe08\xe0\x08\xfe\x08\xff\x80\xff\x80\xff\x80\x7f\x08\x00\x08\x00\x18\xc0\xf8',
            '5': '\x80\x08\x80\x08\x80\x08\x8f\xf8\x8f\xf8\x8f\xf8\x80\x18\x80\x08\x9e\x08\xff\x00\xff\x80\xff\x80\xff\x80\x7f\x00\x08\x08\x00\x08\x808',
            '6': '\xf0\x08\xc0\x08\xc1\xc8\x87\xf8\x0f\xf8\x0f\xf8\x08\x18\x00\x08\x03\x00\x07\x80\x0f\x80\x0f\x80\x0f\x80\x87\x80\x83\x00\xc0\x08\xe0\x18',
            '7': '\x00\x00\x00\x00\x00\x00\xff\x08\xff\x08\xfe\x18\xfe\x18\xfc8\xfc8\xf8x\xf8x\xf0\xf8\xf0\xf8\xe0\xf8\xe1\xf8\xc1\xf8\xc3\xf8',
            '8': '\xe0x\x80\x08\x00\x08\x07\x00\x0f\x80\x87\x08\x80\x18\xe08\xc0\x08\x87\x00\x0f\x80\x0f\x80\x0f\x80\x07\x80\x80\x08\xc0\x08\xf0x',
            '9': '\xf0x\xc0\x18\x80\x08\x87\x88\x0f\x80\x0f\x80\x0f\x80\x07\x00\x80\x00\xc0\x00\xf0\x80\xff\x80\xff\x88\xff\x08\x80\x18\x808\xc0\xf8'
        },
        (13, 18): {
            '1': '\xf7\xf8\x80x\x00x\x80x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\xf8x\x80\x00\x80\x00\x80\x00',
            '2': '\xf5\xf8\x808\x00\x08\x0e\x08\x7f\x08\xff\x00\xff\x08\xff\x08\xfe\x08\xfc\x18\xf88\xf0x\xe1\xf8\x83\xf8\x07\f8\x00\x00\x00\x08\x00\x00',
            '3': '\xfa\xf8\x80\x18\x80\x08\xbc\x08\xff\x08\xff\x08\xff\x08\xfe\x08\xe08\xe0\x18\xf8\x08\xff\x08\xff\x00\xff\x00\xff\x00\x08\x08\x00\x18\x008',
            '5': '\x97\x98\x00\x18\x00\x18\x01X\x0f\xf8\x8f\xf8\x00\xf8\x00\x18\x00\x08\xbe\x08\xff\x00\xff\x80\xff\x80\xff\x00~\x08\x00\x08\x00\x18\xc0x',
            '6': '\xfex\xf0\x08\xc0\x08\x81\xc8\x87\xf8\x0f\xf8\x0f\xf8\x00\x18\x00\x08\x03\x00\x07\x80\x0f\x80\x0f\x80\x0f\x80\x87\x80\x83\x08\xc0\x08\xe0\x18',
            '7': '\xf3\x80\x80\x00\x00\x00\x81\x00\xff\x00\xff\x08\xff\x08\xfe\x18\xfe\x18\xfc\x18\xfc8\xf88\xf8x\xf8x\xf0\xf8\xf0\xf8\xe1\xf8\xe1\xf8',
            '8': '\xfc\xf8\xc0\x18\x80\x08\x07\x00\x0f\x80\x0f\x80\x8f\x80\x83\x08\xe0\x18\xc0\x18\x87\x08\x0f\x80\x0f\x80\x0f\x80\x0f\x80\x07\x00\x80\x08\xc0\x18',
            '9': '\xfb\xf8\xc08\x80\x18\x07\x08\x0f\x08\x0f\x80\x0f\x80\x0f\x80\x0f\x00\x00\x00\x80\x00\xe0\x80\xff\x80\xff\x00\xff\x08\x9c\x18\x00\x18\x80x'
        },
        (14, 17): {
            '0': '\xf8<\xe0\x1c\xc0\x0c\x87\x84\x87\x84\x0f\xc4\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x8f\xc4\x87\x84\x87\x84\xc0\x0c\xe0\x1c\xf8|',
            '4': '\xfc\x1c\xf8\x1c\xf8\x1c\xf0\x1c\xe2\x1c\xe2\x1c\xc6\x1c\xce\x1c\x8e\x1c\x1e\x1c>\x1c\x00\x00\x00\x00\x00\x04\xfe\x1c\xfe\x1c\xfe\x1c',
            '6': '\xfc\x0c\xe0\x04\xc0\x04\x83\xfc\x8f\xfc\x88<\x00\x0c\x00\x04\x07\x84\x0f\xc0\x0f\xc0\x0f\xc0\x8f\xc0\x87\x84\xc0\x04\xe0\x0c\xf8<'
        },
        (14, 18): {
            '0': '\xf8|\xe0\x1c\xc0\x0c\x83\x04\x87\x80\x87\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x0f\xc0\x87\xc0\x87\xc0\x83\x84\xc0\x04\xe0\x0c\xf0<',
            '4': '\xff\x0c\xfc\x0c\xf8\x0c\xf8\x0c\xf0\x0c\xf3\x0c\xe3\x0c\xc7\x0c\xc7\x0c\x8f\x0c\x1f\x0c\x1e\x00\x00\x00\x00\x00\x00\x0c\xff\x0c\xff\x0c\xff\x0c',
            '6': '\xfc\x1c\xf0\x04\xe0\x04\xc1\xf4\x83\xfc\x87\xfc\x86|\x80\x0c\x80\x04\x03\x80\x87\xc0\x87\xc0\x87\xc0\x87\xc0\xc3\x80\xc1\x04\xe0\x0c\xf0\x1c',
            '8': '\xf0<\xc0\x0c\x80\x04\x87\x84\x87\x84\x87\x84\x87\x84\xc0\x0c\xe0\x1c\xc0\x0c\x87\x84\x87\xc0\x0f\xc0\x07\xc0\x87\x80\x81\x04\xc0\x04\xf0\x1c',
            '9': '\xf0|\xc0\x1c\x80\x0c\x87\x04\x07\x84\x0f\x80\x0f\x80\x07\x80\x87\x00\x80\x00\xc0\x00\xf0\xc0\xff\x80\xff\x84\xff\x04\xc0\x0c\xc0\x1c\xc0|'
        },
        (15, 17): {
            '0': '\xf0\x1e\xe0\x0e\xc1\x06\x83\xc2\x87\xc2\x87\xc2\x87\xc0\x07\xc0\x07\xc0\x87\xc0\x87\xc2\x87\xc2\x87\xc2\x87\x82\xc0\x06\xe0\x0e\xf0\x1e',
            '4': '\xfe\x0e\xfc\x0e\xfc\x0e\xf8\x0e\xf1\x0e\xe3\x0e\xe3\x0e\xc7\x0e\x8f\x0e\x8f\x0e\x1f\x0e\x00\x00\x00\x02\x00\x02\xff\x0e\xff\x0e\xff\x0e'
        },
        (15, 18): {
            '0': '\xfe\xfe\xf0\x1e\xe0\x06\xc1\x86\x87\xc2\x87\xc2\x87\xc2\x87\xc0\x87\xc2\x87\xc0\x87\xc2\x07\xc2\x87\xc2\x87\xc2\x83\x82\xc0\x06\xe0\x0e\xf0\x1e'
        }
    }

    def __init__(self):
        super(Captcha, self).__init__()

    @classmethod
    def Recognize(cls, imgStream):
        img = cls.PreProcess(imgStream)
        boundaries = cls.Split(img)
        return ''.join([cls.GuessDigit(img.crop(b)) for b in boundaries])

    @classmethod
    def PreProcess(cls, imgStream):
        """
        Pre-process contains convertion from IO Stream to Image object and binarization
        """
        threshold = 175
        img = Image.open(imgStream)
        return img.convert('L').point(lambda p: 0 if p < threshold else 255, '1')

    @classmethod
    def Split(cls, img):
        """
        This method return the boundary of every digit in captcha image
        in format (left, upper, right, lower) which can be used for cropping.
        """
        pix = img.load()

        # vertical cut
        vertical = []
        foundLetter = False
        for x in range(img.size[0]):
            inLetter = False
            for y in range(img.size[1]):
                if pix[x, y] == 0:
                    inLetter = True
                    break
            if not foundLetter and inLetter:
                foundLetter = True
                start = x
            if foundLetter and not inLetter:
                foundLetter = False
                end = x
                vertical.append((start, end))

        # horizontal cut
        def _findFistLine(pix, y_range, x_start, x_end):
            for y in y_range:
                for x in range(x_start, x_end):
                    if pix[x, y] == 0:
                        return y

        horizontal = []
        for i in vertical:
            start = _findFistLine(pix, range(img.size[1]), *i)
            end = _findFistLine(pix, reversed(range(img.size[1])), *i)
            horizontal.append((start, end))

        return [(vertical[i][0], horizontal[i][0], vertical[i][1], horizontal[i][1] + 1) for i in range(len(vertical))]

    @classmethod
    def GuessDigit(cls, img):
        """Recognize one digit"""
        if img.size not in cls.trainingSet:
            raise CaptchaRecognitionFailed()
        imgString = img.tostring()
        candidates = cls.trainingSet[img.size]
        guesses = dict.fromkeys(candidates.keys())
        for digit, eigen in candidates.iteritems():
            guesses[digit] = cls.DifferentBits(imgString, eigen)
        return min(guesses, key=guesses.get)

    @classmethod
    def DifferentBits(cls, imgString1, imgString2):
        """Tell how many bits are different between two strings"""
        return sum([bin(ord(v1) ^ ord(v2)).count('1') for v1, v2 in izip(imgString1, imgString2)])


class PortalCaptcha(Captcha):
    def __init__(self):
        super(PortalCaptcha, self).__init__()

    @classmethod
    def GetURL(cls):
        return config.IMG_URL

    @classmethod
    def GetCookieName(cls):
        return 'portalservice'

    @classmethod
    def GetName(cls):
        return 'portal'


class BrasCaptcha(Captcha):
    def __init__(self):
        super(BrasCaptcha, self).__init__()

    @classmethod
    def GetURL(cls):
        return config.BRAS_IMG_URL

    @classmethod
    def GetCookieName(cls):
        return 'selfservice'

    @classmethod
    def GetName(cls):
        return 'bras'


class CaptchaRecognitionFailed(Exception):
    pass
